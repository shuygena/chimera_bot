from aiogram import Bot, Dispatcher, executor, types

VOLUME_CONTROL:str = 'norm'
API_TOKEN: str = '5822562559:AAGmtLjuY2_yaxZ7HjKzgCiLdTdciZuVRK8'

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher(bot)

async def process_start_command(message: types.Message):
    await message.answer('''–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠—Ö–æ-–±–æ—Ç üì¢\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!''')

async def process_help_command(message: types.Message):
    await message.answer('''–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –≤ –æ—Ç–≤–µ—Ç —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ì—Ä–æ–º–∫–æ—Å—Ç—å —ç—Ö–∞ –º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:
/normecho - –æ–±—ã—á–Ω–æ–µ —ç—Ö–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
/loudecho - –≥—Ä–æ–º–∫–æ–µ —ç—Ö–æ
/quietecho - —Ç–∏—Ö–æ–µ —ç—Ö–æ''')

async def process_normecho_command(message: types.Message):
    global VOLUME_CONTROL
    VOLUME_CONTROL = 'norm'
    await message.answer('üîâ')

async def process_loudecho_command(message: types.Message):
    global VOLUME_CONTROL
    VOLUME_CONTROL = 'loud'
    await message.answer('üîä')

async def process_quietecho_command(message: types.Message):
    global VOLUME_CONTROL
    VOLUME_CONTROL = 'quiet'
    await message.answer('üîà')

async def send_photo_echo(message: types.Message):
    await message.answer_photo(message.photo[0].file_id)

async def send_audio_echo(message: types.Message):
    await message.answer_audio(message.audio.file_id)

async def send_video_echo(message: types.Message):
    await message.answer_video(message.video.file_id)

async def send_sticker_echo(message: types.Message):
    await message.answer_sticker(message.sticker.file_id)

async def send_voice_echo(message: types.Message):
    await message.answer_voice(message.voice.file_id)

async def send_files(message: types.Message):
    await message.answer_document(message.document.file_id)

async def send_echo(message: types.Message):
    if VOLUME_CONTROL == 'loud':
        await message.reply(message.text.upper())
    elif VOLUME_CONTROL == 'quiet':
        await message.reply(message.text.lower())
    else:
        await message.reply(message.text)

dp.register_message_handler(process_start_command, commands='start')
dp.register_message_handler(process_help_command, commands='help')
dp.register_message_handler(process_normecho_command, commands='normecho')
dp.register_message_handler(process_loudecho_command, commands='loudecho')
dp.register_message_handler(process_quietecho_command, commands='quietecho')
dp.register_message_handler(send_photo_echo, content_types=['photo'])
dp.register_message_handler(send_audio_echo, content_types=['audio'])
dp.register_message_handler(send_video_echo, content_types=['video'])
dp.register_message_handler(send_sticker_echo, content_types=['sticker'])
dp.register_message_handler(send_voice_echo, content_types=['voice'])
dp.register_message_handler(send_files,content_types=['document'])
dp.register_message_handler(send_echo)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)